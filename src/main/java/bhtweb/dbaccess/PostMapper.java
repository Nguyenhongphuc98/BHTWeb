package bhtweb.dbaccess;

import java.beans.Statement;
import java.security.KeyStore.PrivateKeyEntry;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import javax.resource.spi.RetryableUnavailableException;

import bhtweb.dto.PostDTO;
import bhtweb.utils.DateTimeUtils;

public class PostMapper extends DBMapper {

	//Hằng số để ta chỉnh pageLimit mặc định khi fetchPost, searchPost,...
	//Đây là số element tối đa của một trang.
	private static final Integer DEFAULT_PAGE_LIMIT = 10;
	
	//Các chuỗi phục vụ cho preparedStatement.
	private static final String insertPostStr = "INSERT INTO POST VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	private static final String updatePostStr = "UPDATE POST SET PostTitle = ?, PostContentURL = ?, PostSubmitDtm = ?, PostPublishDtm = ?, PostReadTime = ?, NumVote = ?, NumView = ?, PostSoftDeleted = ?, PostHidden = ?, PostApproved = ?, PosterUserID = ?, PostCategoryID = ? WHERE PostID = ?";
	private static final String fetchPostStr = "SELECT * FROM POST LIMIT ?,? ORDER BY postPublishDtm DESC";
	private static final String searchPostStr = "SELECT * FROM POST WHERE PostTitle LIKE %?% LIMIT ?,? ORDER BY postPublishDtm DESC";
	
	
	//preparedStatement.
	PreparedStatement insertPostPst = null;
	PreparedStatement updatePostPst = null;
	PreparedStatement fetchPostPst = null;
	PreparedStatement searchPostPst = null;
	
	public PostMapper() throws Exception {
		super();
		//Tạo preparedStatement.
		try {
			insertPostPst = getConnection().prepareStatement(insertPostStr, PreparedStatement.RETURN_GENERATED_KEYS);
			updatePostPst = getConnection().prepareStatement(updatePostStr);
			fetchPostPst = getConnection().prepareStatement(fetchPostStr);
			searchPostPst = getConnection().prepareStatement(searchPostStr);
		}catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	public Boolean updatePost (PostDTO postDTO) {
		try {
			updatePostPst.setString(1, postDTO.getPostTitle());
			updatePostPst.setString(2, postDTO.getPostContentURL());
			updatePostPst.setTimestamp(3, DateTimeUtils.getTimestamptFromDate(postDTO.getPostPublishDtm()));
			updatePostPst.setLong(4, postDTO.getPostReadTime());
			updatePostPst.setLong(5, postDTO.getNumVote());
			updatePostPst.setLong(6, postDTO.getNumView());
			updatePostPst.setBoolean(7, postDTO.getPostSoftDeleted());
			updatePostPst.setBoolean(8, postDTO.getPostHidden());
			updatePostPst.setBoolean(9, postDTO.getPostApproved());
			updatePostPst.setLong(10, postDTO.getPosterUserID());
			updatePostPst.setLong(11, postDTO.getPostCategoryID());
			updatePostPst.setLong(12, postDTO.getPostID());
			
			//Chạy lệnh cập nhật post.
			Integer rows = updatePostPst.executeUpdate();
			if (rows > 0)
				return true;
			else
				return false;
		} catch (Exception ex) {
			// TODO: handle exception
			ex.printStackTrace();
		}
		return false;
	}
	
	public PostDTO insertPost (PostDTO postDTO) {
		
		try {
			//AutoGenerated ID, vì vậy lúc nào cũng truyền vào 0 cho ID khi tạo.
			insertPostPst.setLong(1, 0);
			insertPostPst.setString(2, postDTO.getPostTitle());
			insertPostPst.setString(3, postDTO.getPostContentURL());
			insertPostPst.setTimestamp(4, DateTimeUtils.getTimestamptFromDate(postDTO.getPostPublishDtm()));
			insertPostPst.setLong(5, postDTO.getPostReadTime());
			insertPostPst.setLong(6, postDTO.getNumVote());
			insertPostPst.setLong(7, postDTO.getNumView());
			insertPostPst.setBoolean(8, postDTO.getPostSoftDeleted());
			insertPostPst.setBoolean(9, postDTO.getPostHidden());
			insertPostPst.setBoolean(10, postDTO.getPostApproved());
			insertPostPst.setLong(11, postDTO.getPosterUserID());
			insertPostPst.setLong(12, postDTO.getPostCategoryID());
			
			//Chạy lệnh thêm mới một Post.
			insertPostPst.executeUpdate();
			
			//Lấy về ID vừa được tạo.
			ResultSet rSet = insertPostPst.getGeneratedKeys();
			rSet.next();
			postDTO.setPostID(rSet.getLong(1));
			
		}catch (Exception ex) {
			ex.printStackTrace();
			postDTO.setPostID(null);
		}
		return postDTO;
	}
	
	//Hàm fetch sẽ sử dụng pageLimit mặc định như đã được cấu hình ở trên.
	public ArrayList<PostDTO> fetchPost (Integer pageNo){
		return fetchPost(pageNo, DEFAULT_PAGE_LIMIT);
	}
	
	public ArrayList<PostDTO> fetchPost (Integer pageNo, Integer pageLimit){
		Integer startLimit = (pageNo - 1) * pageLimit;
		Integer offSet = pageLimit;
		
		ArrayList<PostDTO> postsResult = new ArrayList<>();
		
		try {
			fetchPostPst.setLong(1, startLimit);
			fetchPostPst.setLong(2, offSet);
			
			ResultSet rSet = fetchPostPst.executeQuery();
			
			while (rSet != null && rSet.next()) {
				PostDTO postDTO = new PostDTO();
				postDTO.setNumView(rSet.getLong("NumView"));
				postDTO.setNumVote(rSet.getLong("NumVote"));
				postDTO.setPostApproved(rSet.getBoolean("PostApproved"));
				postDTO.setPostCategoryID(rSet.getLong("PostCategoryID"));
				postDTO.setPostContentURL(rSet.getString("PostContentURL"));
				postDTO.setPosterUserID(rSet.getLong("PosterUserID"));
				postDTO.setPostHidden(rSet.getBoolean("PostHidden"));
				postDTO.setPostID(rSet.getLong("PostID"));
				postDTO.setPostPublishDtm(rSet.getTimestamp("PostPublishDtm"));
				postDTO.setPostReadTime(rSet.getLong("PostReadTime"));
				postDTO.setPostSoftDeleted(rSet.getBoolean("PostSoftDeleted"));
				postDTO.setPostSubmitDtm(rSet.getTimestamp("PostSubmitDtm"));
				postDTO.setPostTitle(rSet.getString("PostTitle"));
				
				postsResult.add(postDTO);
			}
			
		}catch (Exception ex) {
			// TODO: handle exception
			ex.printStackTrace();
			return null;
		}

		return postsResult;
	}
	
	
	public ArrayList<PostDTO> searchPost (String postTitle, Integer pageNo){
		return searchPost(postTitle, pageNo, DEFAULT_PAGE_LIMIT);
	}
	
	public ArrayList<PostDTO> searchPost (String postTitle, Integer pageNo, Integer pageLimit){
		return null;
	}
	
}
